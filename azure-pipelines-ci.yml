pool:
  vmImage: 'windows-2019'

variables:
  Prerelease: 'ci'
  buildId: "1$(Build.BuildId)"
  buildProjects: '**/src/**/*.csproj'

steps:
# Print buildId
- script: |
    echo "BuildId = $(buildId)"
  displayName: 'Print buildId'

- task: PowerShell@2
  displayName: "Use JDK11 by default"
  inputs:
    targetType: 'inline'
    script: |
      $jdkPath = $env:JAVA_HOME_11_X64
      Write-Host "##vso[task.setvariable variable=JAVA_HOME]$jdkPath"

# Install Tools
- task: DotNetCoreCLI@2
  displayName: "Install tool: dotnet-coverageconverter"
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'update --global dotnet-coverageconverter'

- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis configuration'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'wiremock-net'
    scannerMode: 'MSBuild'
    projectKey: 'WireMock-Net_WireMock.Net'
    extraProperties: |
      stef_sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\**\*.trx
      stef_sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)\**\*.coveragexml

- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis configuration'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'wiremock-net'
    scannerMode: 'MSBuild'
    projectKey: 'WireMock-Net_WireMock.Net'

- task: DotNetCoreCLI@2
  displayName: 'Build test project'
  inputs:
    command: 'build'
    projects: './test/WireMock.Net.Tests/WireMock.Net.Tests.csproj'
    arguments: '--configuration Debug --framework netcoreapp3.1'

- task: VSTest@2
  displayName: 'VsTest'
  inputs:
    testSelector: 'testAssemblies'
    vsTestVersion: 16.0
    diagnosticsEnabled: true
    codeCoverageEnabled: true
    testAssemblyVer2: |
     **\*tests.dll
     !**\obj\**

- task: CmdLine@2
  displayName: 'Convert .coverage to .coveragexml'
  inputs:
    script: 'dotnet-coverageconverter --CoverageFilesFolder "$(Agent.TempDirectory)\TestResults"'
  condition: and(succeeded(), eq(variables['CC'], 'yes'))

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud analysis'

- task: SonarCloudPublish@1
  displayName: 'Publish results on build summary'

- task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@19
  displayName: 'WhiteSource Bolt'
  condition: and(succeeded(), eq(variables['RUN_WHITESOURCE'], 'yes'))

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

# Based on https://whereslou.com/2018/09/versioning-and-publishing-nuget-packages-automatically-using-azure-devops-pipelines/
- task: DotNetCoreCLI@2
  displayName: Build Release
  inputs:
    command: 'build'
    arguments: /p:Configuration=Release # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

- task: DotNetCoreCLI@2
  displayName: Pack
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: pack
    configuration: 'Release'
    packagesToPack: $(buildProjects)
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    verbosityPack: 'normal'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

# https://github.com/NuGet/Home/issues/8148
- task: DotNetCoreCLI@2
  displayName: Push to MyGet
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: custom
    custom: nuget
    arguments: push $(Build.ArtifactStagingDirectory)\packages\*.nupkg -n true -s https://www.myget.org/F/wiremock-net/api/v3/index.json -k $(MyGetKey)
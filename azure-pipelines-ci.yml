pool:
  vmImage: 'Ubuntu-latest'

variables:
  Prerelease: 'ci'
  buildId: "1$(Build.BuildId)"
  buildProjects: '**/src/**/*.csproj'

steps:
- script: |
    echo "BuildId = $(buildId)"
  displayName: 'Print buildId'

- task: PowerShell@2
  displayName: "Use JDK11 by default"
  inputs:
    targetType: 'inline'
    script: |
      $jdkPath = $env:JAVA_HOME_11_X64
      Write-Host "##vso[task.setvariable variable=JAVA_HOME]$jdkPath"

- script: |
    sudo apt install gnupg ca-certificates
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
    sudo apt update
    sudo apt install mono-devel
  displayName: "install mono-devel"

- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: SonarCloud
    organization: wiremock-net
    projectKey: 'WireMock-Net_WireMock.Net'
    projectName: 'WireMock.Net'
    extraProperties: |
      sonar.branch.name=$(Build.SourceBranchName)
      sonar.verbose=true
      sonar.cs.opencover.reportsPaths=**\coverage.netcoreapp3.1.opencover.xml

- script: |
    dotnet sonarscanner begin /k:"WireMock-Net_WireMock.Net" /o:"wiremock-net" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(SONAR_TOKEN)" /v:"$(buildId)" /d:sonar.cs.opencover.reportsPaths="**\coverage.netcoreapp3.1.opencover.xml" /d:sonar.verbose=true /d:sonar.branch.name=$(Build.SourceBranchName)
  displayName: Begin SonarScanner
  condition: and(succeeded(), eq(variables['RUN_SONARCMD'], 'yes'))

- task: DotNetCoreCLI@2
  displayName: 'Execute Unit tests'
  condition: and(succeeded(), eq(variables['XXX'], 'yes'))
  inputs:
    command: 'test'
    projects: './test/WireMock.Net.Tests/WireMock.Net.Tests.csproj'
    arguments: '--collect "Code Coverage" --configuration Debug --framework netcoreapp3.1 --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

- script: |
    dotnet test ./test/WireMock.Net.Tests/WireMock.Net.Tests.csproj --configuration Debug --framework netcoreapp3.1 --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
  displayName: 'Build source, tests and run tests for netcoreapp3.1 (with coverage)'

- script: |
    dotnet sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
  displayName: End SonarScanner
  condition: and(succeeded(), eq(variables['RUN_SONARXCMD'], 'yes'))

- task: SonarCloudAnalyze@1
  displayName: 'SonarCloud: Run Code Analysis'

- task: SonarCloudPublish@1
  displayName: 'SonarCloud: Publish Quality Gate Result'

- task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@19
  displayName: 'WhiteSource Bolt'
  condition: and(succeeded(), eq(variables['RUN_WHITESOURCE'], 'yes'))

- script: |
    %USERPROFILE%\.nuget\packages\codecov\1.12.3\tools\codecov.exe -f "./test/WireMock.Net.Tests/coverage.netcoreapp3.1.opencover.xml" -t $(CODECOV_TOKEN)
  displayName: Upload coverage to codecov.io
  condition: and(succeeded(), eq(variables['UPLOAD_CODECOV'], 'yes'))

- script: |
    bash <(curl https://codecov.io/bash) -t $(CODECOV_TOKEN) -f ./test/WireMock.Net.Tests/coverage.netcoreapp3.1.opencover.xml
  displayName: 'codecov'

- task: PublishTestResults@2
  condition: and(succeeded(), eq(variables['PUBLISH_TESTRESULTS'], 'yes'))
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishBuildArtifacts@1
  displayName: Publish coverage file
  inputs:
    PathtoPublish: '/home/vsts/work/1/s/test/WireMock.Net.Tests/coverage.netcoreapp3.1.opencover.xml'

# Based on https://whereslou.com/2018/09/versioning-and-publishing-nuget-packages-automatically-using-azure-devops-pipelines/
- task: DotNetCoreCLI@2
  displayName: Build Release
  inputs:
    command: 'build'
    arguments: /p:Configuration=Release # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

- task: DotNetCoreCLI@2
  displayName: Pack
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: pack
    configuration: 'Release'
    packagesToPack: $(buildProjects)
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    verbosityPack: 'normal'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

# https://github.com/NuGet/Home/issues/8148
- task: DotNetCoreCLI@2
  displayName: Push to MyGet
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: custom
    custom: nuget
    arguments: push $(Build.ArtifactStagingDirectory)\packages\*.nupkg -n true -s https://www.myget.org/F/wiremock-net/api/v3/index.json -k $(MyGetKey)